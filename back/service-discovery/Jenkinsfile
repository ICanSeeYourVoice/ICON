pipeline {
    environment {
        dockerImage = ''
    }
    agent any
    stages {
        stage('Checkout') {
            steps {
                script {
                    // 코드 체크아웃
                    checkout scm
                }
            }
        }

        stage('Build Discovery-Server .JAR') {
            steps {
                script {
                    // 변경된 브랜치와 머지 대상 브랜치 출력
                    // 현재 빌드 중인 브랜치명 확인
                    def currentBranch = env.BRANCH_NAME
                    echo "Merge Target Branch: \${CHANGE_TARGET}"
                    echo "Current Branch: \${currentBranch}"
                    echo "back end 입니다."
                    // gradlew 빌드
                    //rwx
                    sh 'chmod +x ./back/service-discovery/gradlew'
                    sh '''
                        cd ./back/service-discovery/
                        ./gradlew clean build
                    '''
                }
            }
        }
        stage('Build Discovery Image') {
            steps {
                script {
                    dockerImage = docker.build("backend-discovery", "-f back/service-discovery/Dockerfile ./back/service-discovery")
                }
            }
        }
        stage("Kill exist container") {
            steps {
                script {
                    def existingContainers = sh(script: "docker ps -aq -f name=backend-discovery", returnStdout: true).trim()
                    if (existingContainers) {
                        sh "docker rm -f ${existingContainers}"
                    }
//                     sh "docker system prune -af"
                }
            }
        }
        stage("run container") {
            steps {
                script {
                    sh 'docker rm -f backend-discovery'
                    sh "docker run -d --restart=always -p 8761:8761 --name backend-discovery backend-discovery"
                }
            }
        }
        stage('Clean Discovery Image') {
            steps {
                script {
                    sh "docker system prune -af"
                }
            }
        }

        stage("Garbage Collect TESTSERV") {
            steps {
                sshPublisher(
                    continueOnError: true, failOnError: false,
                    publishers: [
                        sshPublisherDesc(
                            configName: "EC2_1",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker kill \$(docker ps | grep Discovery_Server | tr ' ' '\t' | cut -f1)"),
                                sshTransfer(execCommand: "sudo docker system prune -af")
                            ]
                        )
                    ]
                )
            }
        }
    }
}
