pipeline {
    environment {
        repository = "hggew/icon-eureka"
        DOCKERHUB_CREDENTIALS = credentials('docker_credentials')
        dockerImage = ''
    }

    agent any

    stages {
        stage('Checkout') {
            steps {
                script {
                    // 코드 체크아웃
                    checkout scm
                }
            }
        }

        stage('Build Discovery-Server .JAR') {
            steps {
                script {
                    // 변경된 브랜치와 머지 대상 브랜치 출력
                    // 현재 빌드 중인 브랜치명 확인
                    def currentBranch = env.BRANCH_NAME
                    echo "Merge Target Branch : \${CHANGE_TARGET}"
                    echo "Current Branch: \${currentBranch}"

                    echo "discovery server 입니다."
                    sh 'pwd'
                    sh 'ls -al'

                    //gradlew 빌드
                    sh 'java --version'
                    sh 'chmod -R u+w+x /var/jenkins_home/workspace/back-test/back/service-discovery/gradlew'
                    
                    sh '''cd /var/jenkins_home/workspace/back-test/back/service-discovery
                    ls -al
                    ''' 

 
                    // sh 'chmod +x /var/jenkins_home/workspace/back-test/gradlew'
                    dir('/var/jenkins_home/workspace/back-test/back/service-discovery') {
                        sh './gradlew clean build'
                    }
//                     sh '''
//                         cd ./var/jenkins_home/workspace/back-test &&
//                         ./gradlew clean build
//                     '''
                }
            }
        }

        stage('Build Discovery-Server Image'){
            steps{
                script{
                    // dockerImage = docker.build("${repository}:icon-eureka_${BUILD_NUMBER}", "-f /var/jenkins_home/workspace/back-test/back/service-discovery/Dockerfile /var/jenkins_home/workspace/back-test/back/service-discovery")
                    dockerImage = docker.build("${repository}:icon-eureka_${BUILD_NUMBER}", "-f back/service-discovery/Dockerfile ./back/service-discovery")
                }
            }
        }

        stage('DockerHub Login'){
            steps{
                script{
                    sh "echo \${DOCKERHUB_CREDENTIALS_PSW} | docker login -u \${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                }
            }
        }

        stage('Push Discovery-Server Image to DockerHub'){
            steps {
                script {
                    sh "docker push \${repository}:icon-eureka_\${BUILD_NUMBER}"
                }
            }
        }

        // stage('Clean Discovery-Server Image'){
        //     steps{
        //         script{
        //             sh "docker rmi \${repository}:icon-eureka_\${BUILD_NUMBER}"
        //         }
        //     }
        // }

        stage("Garbage Collect TESTSERV") {
            steps {
                sshPublisher(
                    continueOnError: true, failOnError: false,
                    publishers: [
                        sshPublisherDesc(
                            configName: "icon-ssh",
                            // configName: "icon-ssh-credential",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker kill \$(docker ps | grep icon-eureka | tr ' ' '\t' | cut -f1)"),
                                // sshTransfer(execCommand: "sudo docker system prune -af")
                                sshTransfer(execCommand: "sudo docker ps -a")
                            ]
                        )
                    ]
                )
            }
        }

        stage("Deploy"){
            steps{
                sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: "icon-ssh",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker rm -f icon-eureka"),
                                sshTransfer(execCommand: "sudo docker pull " + repository +":icon-eureka_${BUILD_NUMBER}"),
                                sshTransfer(execCommand: "sudo docker run -d -p 8761:8761 --name icon-eureka --network mybridge " + repository + ":icon-eureka_${BUILD_NUMBER}")
                            ]
                        )
                    ]
                )
            }
        }
    }
}
