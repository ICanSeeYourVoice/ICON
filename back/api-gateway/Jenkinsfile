pipeline {
    environment {
        repository = "hggew/icon"
        DOCKERHUB_CREDENTIALS = credentials('docker_credentials')
        dockerImage = ''
    }

    agent any

    stages {
        stage('Checkout') {
            steps {
                script {
                    // 코드 체크아웃
                    checkout scm
                }
            }
        }

        // application.yml
        stage('secret.yml delete') {
            steps {
                script{
                    sh 'rm -f /var/jenkins_home/workspace/back-gateway/back/api-gateway/src/main/resources/application.yml'

                    echo "delete application.yml"

                    sh '''cd /var/jenkins_home/workspace/back-gateway/back/api-gateway/src/main/resources
                    ls -al
                    '''
                }
            }
        }

        stage('secret.yml download') {
        	steps {
            	withCredentials([file(credentialsId: 'back-gateway-application', variable: 'applicationFile')]) {
                	script {
                        echo "download application.yml"
                    	sh 'cp -f $applicationFile /var/jenkins_home/workspace/back-gateway/back/api-gateway/src/main/resources/application.yml'
                    }
        		}
            }
        }



        stage('Build Gateway-Server .JAR') {
            steps {
                script {
                    // 변경된 브랜치와 머지 대상 브랜치 출력
                    // 현재 빌드 중인 브랜치명 확인
                    def currentBranch = env.BRANCH_NAME
                    echo "Merge Target Branch : \${CHANGE_TARGET}"
                    echo "Current Branch: \${currentBranch}"

                    echo "api-gateway server 입니다."
                    sh 'pwd'
                    sh 'ls -al'

                    //gradlew 빌드
                    sh 'java --version'
                    sh 'chmod -R u+w+x /var/jenkins_home/workspace/back-gateway/back/api-gateway/gradlew'

                    sh '''cd /var/jenkins_home/workspace/back-gateway/back/api-gateway
                    ls -al
                    '''

                    dir('/var/jenkins_home/workspace/back-gateway/back/api-gateway') {
                        sh './gradlew clean build'
                    }
                }
            }
        }

        stage('Build Gateway-Server Image'){
            steps{
                script{
                    dockerImage = docker.build("${repository}:icon-gateway_${BUILD_NUMBER}", "--platform linux/amd64 -f back/api-gateway/Dockerfile ./back/api-gateway")
                }
            }
        }

        stage('DockerHub Login'){
            steps{
                script{
                    sh "echo \${DOCKERHUB_CREDENTIALS_PSW} | docker login -u \${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                }
            }
        }

        stage('Push Gateway-Server Image to DockerHub'){
            steps {
                script {
                    sh "docker push \${repository}:icon-gateway_\${BUILD_NUMBER}"
                }
            }
        }

        stage('Clean Gateway-Server Image'){
            steps{
                script{
                    sh "docker rmi \${repository}:icon-gateway_\${BUILD_NUMBER}"
                }
            }
        }

        stage("Garbage Collect TESTSERV") {
            steps {
                sshPublisher(
                    continueOnError: true, failOnError: false,
                    publishers: [
                        sshPublisherDesc(
                            configName: "icon-ssh",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker kill \$(docker ps | grep icon-gateway | tr ' ' '\t' | cut -f1)"),
                                sshTransfer(execCommand: "sudo docker image prune -af"),
		                        sshTransfer(execCommand: "sudo docker container prune -f"),
                                sshTransfer(execCommand: "sudo docker ps -a")
                            ]
                        )
                    ]
                )
            }
        }

        stage("Deploy"){
            steps{
                sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: "icon-ssh",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker rm -f icon-gateway"),
                                sshTransfer(execCommand: "sudo docker pull " + repository +":icon-gateway_${BUILD_NUMBER}"),
                                sshTransfer(execCommand: "sudo docker run -d -p 8000:8000 --name icon-gateway --network host " + repository + ":icon-gateway_${BUILD_NUMBER}")
                            ]
                        )
                    ]
                )
            }
        }
    }
}
